--
-- PostgreSQL database dump
--

-- Dumped from database version 13.4 (Ubuntu 13.4-4.pgdg20.04+1)
-- Dumped by pg_dump version 13.4

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: btree_gin; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS btree_gin WITH SCHEMA public;


--
-- Name: EXTENSION btree_gin; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION btree_gin IS 'support for indexing common datatypes in GIN';


--
-- Name: btree_gist; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS btree_gist WITH SCHEMA public;


--
-- Name: EXTENSION btree_gist; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION btree_gist IS 'support for indexing common datatypes in GiST';


--
-- Name: citext; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS citext WITH SCHEMA public;


--
-- Name: EXTENSION citext; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION citext IS 'data type for case-insensitive character strings';


--
-- Name: cube; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS cube WITH SCHEMA public;


--
-- Name: EXTENSION cube; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION cube IS 'data type for multidimensional cubes';


--
-- Name: dblink; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS dblink WITH SCHEMA public;


--
-- Name: EXTENSION dblink; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION dblink IS 'connect to other PostgreSQL databases from within a database';


--
-- Name: dict_int; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS dict_int WITH SCHEMA public;


--
-- Name: EXTENSION dict_int; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION dict_int IS 'text search dictionary template for integers';


--
-- Name: dict_xsyn; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS dict_xsyn WITH SCHEMA public;


--
-- Name: EXTENSION dict_xsyn; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION dict_xsyn IS 'text search dictionary template for extended synonym processing';


--
-- Name: earthdistance; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS earthdistance WITH SCHEMA public;


--
-- Name: EXTENSION earthdistance; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION earthdistance IS 'calculate great-circle distances on the surface of the Earth';


--
-- Name: fuzzystrmatch; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS fuzzystrmatch WITH SCHEMA public;


--
-- Name: EXTENSION fuzzystrmatch; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION fuzzystrmatch IS 'determine similarities and distance between strings';


--
-- Name: hstore; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS hstore WITH SCHEMA public;


--
-- Name: EXTENSION hstore; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION hstore IS 'data type for storing sets of (key, value) pairs';


--
-- Name: intarray; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS intarray WITH SCHEMA public;


--
-- Name: EXTENSION intarray; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION intarray IS 'functions, operators, and index support for 1-D arrays of integers';


--
-- Name: ltree; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS ltree WITH SCHEMA public;


--
-- Name: EXTENSION ltree; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION ltree IS 'data type for hierarchical tree-like structures';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA public;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pg_trgm; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_trgm WITH SCHEMA public;


--
-- Name: EXTENSION pg_trgm; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_trgm IS 'text similarity measurement and index searching based on trigrams';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA public;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgrowlocks; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgrowlocks WITH SCHEMA public;


--
-- Name: EXTENSION pgrowlocks; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgrowlocks IS 'show row-level locking information';


--
-- Name: pgstattuple; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgstattuple WITH SCHEMA public;


--
-- Name: EXTENSION pgstattuple; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgstattuple IS 'show tuple-level statistics';


--
-- Name: tablefunc; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS tablefunc WITH SCHEMA public;


--
-- Name: EXTENSION tablefunc; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION tablefunc IS 'functions that manipulate whole tables, including crosstab';


--
-- Name: unaccent; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS unaccent WITH SCHEMA public;


--
-- Name: EXTENSION unaccent; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION unaccent IS 'text search dictionary that removes accents';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA public;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: xml2; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS xml2 WITH SCHEMA public;


--
-- Name: EXTENSION xml2; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION xml2 IS 'XPath querying and XSLT';


--
-- Name: mention; Type: TYPE; Schema: public; Owner: ztczjmqg
--

CREATE TYPE public.mention AS (
	prefix character varying(2),
	mention_id bigint
);


ALTER TYPE public.mention OWNER TO ztczjmqg;

--
-- Name: option; Type: TYPE; Schema: public; Owner: ztczjmqg
--

CREATE TYPE public.option AS (
	id integer,
	label text,
	author bigint,
	votes bigint[],
	index integer
);


ALTER TYPE public.option OWNER TO ztczjmqg;

--
-- Name: vote; Type: TYPE; Schema: public; Owner: ztczjmqg
--

CREATE TYPE public.vote AS (
	option_id integer,
	voter_id bigint
);


ALTER TYPE public.vote OWNER TO ztczjmqg;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: allowed_editors; Type: TABLE; Schema: public; Owner: ztczjmqg
--

CREATE TABLE public.allowed_editors (
    poll_id integer NOT NULL,
    mention_prefix character varying(2) NOT NULL,
    mention_id bigint NOT NULL
);


ALTER TABLE public.allowed_editors OWNER TO ztczjmqg;

--
-- Name: allowed_vote_viewers; Type: TABLE; Schema: public; Owner: ztczjmqg
--

CREATE TABLE public.allowed_vote_viewers (
    poll_id integer NOT NULL,
    mention_prefix character varying(2) NOT NULL,
    mention_id bigint NOT NULL
);


ALTER TABLE public.allowed_vote_viewers OWNER TO ztczjmqg;

--
-- Name: allowed_voters; Type: TABLE; Schema: public; Owner: ztczjmqg
--

CREATE TABLE public.allowed_voters (
    poll_id integer NOT NULL,
    mention_prefix character varying(2) NOT NULL,
    mention_id bigint NOT NULL
);


ALTER TABLE public.allowed_voters OWNER TO ztczjmqg;

--
-- Name: polls; Type: TABLE; Schema: public; Owner: ztczjmqg
--

CREATE TABLE public.polls (
    id integer NOT NULL,
    question text NOT NULL,
    author bigint NOT NULL,
    expires timestamp with time zone,
    allow_multiple_votes boolean NOT NULL,
    message bigint NOT NULL,
    channel bigint NOT NULL,
    closed boolean DEFAULT false NOT NULL
);


ALTER TABLE public.polls OWNER TO ztczjmqg;

--
-- Name: grouped_allowed_editors; Type: VIEW; Schema: public; Owner: ztczjmqg
--

CREATE VIEW public.grouped_allowed_editors AS
 SELECT polls.id,
    COALESCE(array_agg(ROW(allowed_editors.mention_prefix, allowed_editors.mention_id)::public.mention) FILTER (WHERE (allowed_editors.* IS NOT NULL)), '{}'::public.mention[]) AS allowed_editors
   FROM (public.polls
     LEFT JOIN public.allowed_editors ON ((polls.id = allowed_editors.poll_id)))
  GROUP BY polls.id;


ALTER TABLE public.grouped_allowed_editors OWNER TO ztczjmqg;

--
-- Name: grouped_allowed_vote_viewers; Type: VIEW; Schema: public; Owner: ztczjmqg
--

CREATE VIEW public.grouped_allowed_vote_viewers AS
 SELECT polls.id,
    COALESCE(array_agg(ROW(allowed_vote_viewers.mention_prefix, allowed_vote_viewers.mention_id)::public.mention) FILTER (WHERE (allowed_vote_viewers.* IS NOT NULL)), '{}'::public.mention[]) AS allowed_vote_viewers
   FROM (public.polls
     LEFT JOIN public.allowed_vote_viewers ON ((polls.id = allowed_vote_viewers.poll_id)))
  GROUP BY polls.id;


ALTER TABLE public.grouped_allowed_vote_viewers OWNER TO ztczjmqg;

--
-- Name: grouped_allowed_voters; Type: VIEW; Schema: public; Owner: ztczjmqg
--

CREATE VIEW public.grouped_allowed_voters AS
 SELECT polls.id,
    COALESCE(array_agg(ROW(allowed_voters.mention_prefix, allowed_voters.mention_id)::public.mention) FILTER (WHERE (allowed_voters.* IS NOT NULL)), '{}'::public.mention[]) AS allowed_voters
   FROM (public.polls
     LEFT JOIN public.allowed_voters ON ((polls.id = allowed_voters.poll_id)))
  GROUP BY polls.id;


ALTER TABLE public.grouped_allowed_voters OWNER TO ztczjmqg;

--
-- Name: options_extended_view; Type: VIEW; Schema: public; Owner: ztczjmqg
--

CREATE VIEW public.options_extended_view AS
SELECT
    NULL::integer AS id,
    NULL::integer AS poll_id,
    NULL::text AS label,
    NULL::bigint AS author,
    NULL::bigint[] AS votes,
    NULL::integer AS index;


ALTER TABLE public.options_extended_view OWNER TO ztczjmqg;

--
-- Name: grouped_options; Type: VIEW; Schema: public; Owner: ztczjmqg
--

CREATE VIEW public.grouped_options AS
 SELECT polls.id,
    array_agg(ROW(options_extended_view.id, options_extended_view.label, options_extended_view.author, options_extended_view.votes, options_extended_view.index)::public.option ORDER BY options_extended_view.index) FILTER (WHERE (options_extended_view.poll_id IS NOT NULL)) AS options
   FROM (public.polls
     LEFT JOIN public.options_extended_view ON ((polls.id = options_extended_view.poll_id)))
  GROUP BY polls.id;


ALTER TABLE public.grouped_options OWNER TO ztczjmqg;

--
-- Name: options; Type: TABLE; Schema: public; Owner: ztczjmqg
--

CREATE TABLE public.options (
    id integer NOT NULL,
    poll_id integer NOT NULL,
    label text NOT NULL,
    author bigint,
    index integer NOT NULL
);


ALTER TABLE public.options OWNER TO ztczjmqg;

--
-- Name: options_id_seq; Type: SEQUENCE; Schema: public; Owner: ztczjmqg
--

CREATE SEQUENCE public.options_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.options_id_seq OWNER TO ztczjmqg;

--
-- Name: options_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: ztczjmqg
--

ALTER SEQUENCE public.options_id_seq OWNED BY public.options.id;


--
-- Name: polls_extended_view; Type: VIEW; Schema: public; Owner: ztczjmqg
--

CREATE VIEW public.polls_extended_view AS
 SELECT polls.id,
    polls.question,
    polls.author,
    polls.expires,
    polls.allow_multiple_votes,
    polls.message,
    polls.channel,
    polls.closed,
    grouped_options.options,
    grouped_allowed_voters.allowed_voters,
    grouped_allowed_vote_viewers.allowed_vote_viewers,
    grouped_allowed_editors.allowed_editors
   FROM ((((public.polls
     LEFT JOIN public.grouped_options ON ((polls.id = grouped_options.id)))
     LEFT JOIN public.grouped_allowed_voters ON ((polls.id = grouped_allowed_voters.id)))
     LEFT JOIN public.grouped_allowed_vote_viewers ON ((polls.id = grouped_allowed_vote_viewers.id)))
     LEFT JOIN public.grouped_allowed_editors ON ((polls.id = grouped_allowed_editors.id)));


ALTER TABLE public.polls_extended_view OWNER TO ztczjmqg;

--
-- Name: polls_id_seq; Type: SEQUENCE; Schema: public; Owner: ztczjmqg
--

CREATE SEQUENCE public.polls_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.polls_id_seq OWNER TO ztczjmqg;

--
-- Name: polls_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: ztczjmqg
--

ALTER SEQUENCE public.polls_id_seq OWNED BY public.polls.id;


--
-- Name: votes; Type: TABLE; Schema: public; Owner: ztczjmqg
--

CREATE TABLE public.votes (
    option_id integer NOT NULL,
    voter_id bigint NOT NULL
);


ALTER TABLE public.votes OWNER TO ztczjmqg;

--
-- Name: options id; Type: DEFAULT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.options ALTER COLUMN id SET DEFAULT nextval('public.options_id_seq'::regclass);


--
-- Name: polls id; Type: DEFAULT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.polls ALTER COLUMN id SET DEFAULT nextval('public.polls_id_seq'::regclass);


--
-- Name: allowed_editors allowed_editors_pkey; Type: CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.allowed_editors
    ADD CONSTRAINT allowed_editors_pkey PRIMARY KEY (poll_id, mention_id);


--
-- Name: allowed_vote_viewers allowed_vote_viewers_pkey; Type: CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.allowed_vote_viewers
    ADD CONSTRAINT allowed_vote_viewers_pkey PRIMARY KEY (poll_id, mention_id);


--
-- Name: allowed_voters allowed_voters_pkey; Type: CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.allowed_voters
    ADD CONSTRAINT allowed_voters_pkey PRIMARY KEY (poll_id, mention_id);


--
-- Name: options options_pkey; Type: CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.options
    ADD CONSTRAINT options_pkey PRIMARY KEY (id);


--
-- Name: polls polls_pkey; Type: CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.polls
    ADD CONSTRAINT polls_pkey PRIMARY KEY (id);


--
-- Name: options unique_options_poll_id_index; Type: CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.options
    ADD CONSTRAINT unique_options_poll_id_index UNIQUE (poll_id, index);


--
-- Name: votes votes_pkey; Type: CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.votes
    ADD CONSTRAINT votes_pkey PRIMARY KEY (option_id, voter_id);


--
-- Name: options_extended_view _RETURN; Type: RULE; Schema: public; Owner: ztczjmqg
--

CREATE OR REPLACE VIEW public.options_extended_view AS
 SELECT options.id,
    options.poll_id,
    options.label,
    options.author,
    array_agg(votes.voter_id) FILTER (WHERE (votes.voter_id IS NOT NULL)) AS votes,
    options.index
   FROM (public.options
     LEFT JOIN public.votes ON ((options.id = votes.option_id)))
  GROUP BY options.id;


--
-- Name: allowed_editors allowed_editors_poll_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.allowed_editors
    ADD CONSTRAINT allowed_editors_poll_id_fkey FOREIGN KEY (poll_id) REFERENCES public.polls(id) ON DELETE CASCADE;


--
-- Name: allowed_vote_viewers allowed_vote_viewers_poll_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.allowed_vote_viewers
    ADD CONSTRAINT allowed_vote_viewers_poll_id_fkey FOREIGN KEY (poll_id) REFERENCES public.polls(id) ON DELETE CASCADE;


--
-- Name: allowed_voters allowed_voters_poll_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.allowed_voters
    ADD CONSTRAINT allowed_voters_poll_id_fkey FOREIGN KEY (poll_id) REFERENCES public.polls(id) ON DELETE CASCADE;


--
-- Name: options options_poll_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.options
    ADD CONSTRAINT options_poll_id_fkey FOREIGN KEY (poll_id) REFERENCES public.polls(id) ON DELETE CASCADE;


--
-- Name: votes votes_option_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: ztczjmqg
--

ALTER TABLE ONLY public.votes
    ADD CONSTRAINT votes_option_id_fkey FOREIGN KEY (option_id) REFERENCES public.options(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

